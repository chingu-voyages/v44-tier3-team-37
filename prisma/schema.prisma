generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role          @default(NONE) @map("is_organization")
  organization  Organization?
  images    Image[] @relation(fields: [imageIds], references: [id])
  imageIds String[] @map("image_ids") @db.ObjectId
  @@map("users")
}

model Organization {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  userId      String @map("user_id") @db.ObjectId
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  images      Image[]
  @@unique([userId])
  @@map("organizations")
}


model Image {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  orgId String @map("org_id") @db.ObjectId
  uploadedAt DateTime @map("uploaded_at") @default(now())
  title   String
  location String?
  description String?
  date DateTime? 
  alt String?
  url String
  org   Organization   @relation(fields: [orgId], references: [id], onDelete: Cascade)  
  tagIds String[] @map("tag_ids") @db.ObjectId
  tags   Tag[] @relation(fields: [tagIds], references: [id])
  users User[] @relation(fields: [userIds], references: [id])
  userIds String[] @map("user_ids") @db.ObjectId


  @@map("images")
}



model Tag {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  imageIds String[] @map("image_ids") @db.ObjectId
  images Image[]  @relation(fields: [imageIds], references: [id])

  @@map("tags")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum Role {
  NONE
  USER
  ORG
}
